# We use version 2 of the file format, migrating to 3.x is left as an exercise
# to the reader and out of the scope of this project as the compose file only
# serves as an example.
version: '2.1'

####
# We separate data in a number of volumes to ensure that data will remain even
# though containers are recreated for whatever reasons, and including over
# version migrations.
volumes:
  # PostgreSQL local data
  postgres:

  # Clear text dump of the entire database content
  pgbackup:

  # The volume below is a cheat to exemplify remote backup.  We use a local
  # volume for the example, but using the fentas/davfs docker volume plugin
  # would allow for remote WebDAV backup. There are many other ways to
  # store/mount data offsite.
  webdav:


####
# Declare a network
networks:
  pgbackup:


services:
  #####
  # This is the latest (10.2 at the time of writing) postgres container. We
  # select the Alpine version to minimise the size of the image to enable
  # quicker restarts.  Note that this is based on a healthcheck capable postgres
  # that is automatically built on top of the official Docker container.
  db:
    image: efrecon/postgres:10.2-alpine
    environment:
      - POSTGRES_PASSWORD=J4ekK3QFqBHpgq4XyBEJ7ygL
      - POSTGRES_USER=postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: always
    logging:
        driver: "json-file"
        options:
            max-size: "1m"
            max-file: "10"
    networks:
      - pgbackup

  #####
  # Performs ONE single backup of the database and wait for ever once done. This
  # arranges for removing old backups as this container will be restarting at
  # regular intervals.  Note that the backup container is kept running (idle) at
  # all time to ensure that the cron scheduler container can always find it. We
  # pass the password and username using the same environment variables as the
  # ones used to setup postgres to demonstrate that feature.
  pgbackup:
    image: efrecon/pgbackup
    volumes:
      - pgbackup:/backup
    build: .
    environment:
      - POSTGRES_PASSWORD=J4ekK3QFqBHpgq4XyBEJ7ygL
      - POSTGRES_USER=postgres
    entrypoint:
      - /sbin/tini
      - --
    command: >-
      /usr/local/bin/wait-for.sh
        --verbose
        db:5432
        --
      /usr/local/bin/backup.sh
        -h "db"
        -d "/backup"
        -k 10
        -v
        -t "sh -c \"while true ; do sleep 1 ; done\""
    restart: on-failure
    depends_on:
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "10"
    networks:
      - pgbackup

  #####
  # Performs ONE single copy of the latest backup of the database and wait for
  # ever once done. This arranges for removing old copies as this container will
  # be restarting at regular intervals.  Note that the WebDAV copying container
  # is kept running (idle) at all time to ensure that the cron scheduler
  # container can always find it.  The password is used to encrypt content in
  # the ZIP file in order to slighlty increase security at the remote storage
  # provider and minimise eavesdropping.
  davbackup:
    image: efrecon/pgbackup
    volumes:
      - pgbackup:/mnt/src:ro
      - webdav:/mnt/dst
    build: .
    command: >-
      offsite
      -d /mnt/dst/backup/db/
      -c 9
      -w "cGm9rqb9sutjvh4XYXGTgTJp"
      -k 20
      -v
      -t "sh -c \"while true ; do sleep 1 ; done\""
      '/mnt/src/*.sql'
    restart: on-failure
    depends_on:
      - pgbackup
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "10"
    networks:
      - pgbackup


  ######
  # Restarts the backup-related containers at regular intervals to make sure
  # they perform as expected.  Database backups are created every 5 minutes, and
  # ZIP copies are sent to a "remote" server the minute after. Obviously timings
  # should be changed... Note that we force a leading underscore in the
  # container name matching expression to avoid matching on ourselves: the
  # project itself will be called pgbackup, and this appears as a prefix in the
  # container names generated by docker-compose.
  pulse:
    image: efrecon/dockron
    restart: always
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: >-
      -rules
        "*/5 * * * * *_pgbackup* restart \"\"
         1,6,11,16,21,26,31,36,41,46,51,56 * * * * *_davbackup* restart \"\"
        "
      -verbose INFO
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "10"
    networks:
      - pgbackup
      